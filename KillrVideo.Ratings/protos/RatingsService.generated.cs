// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ratings/ratings_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KillrVideo.Ratings {

  /// <summary>Holder for reflection information generated from ratings/ratings_service.proto</summary>
  public static partial class RatingsServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for ratings/ratings_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RatingsServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXRpbmdzL3JhdGluZ3Nfc2VydmljZS5wcm90bxISa2lsbHJ2aWRlby5y",
            "YXRpbmdzGhljb21tb24vY29tbW9uX3R5cGVzLnByb3RvIncKEFJhdGVWaWRl",
            "b1JlcXVlc3QSKQoIdmlkZW9faWQYASABKAsyFy5raWxscnZpZGVvLmNvbW1v",
            "bi5VdWlkEigKB3VzZXJfaWQYAiABKAsyFy5raWxscnZpZGVvLmNvbW1vbi5V",
            "dWlkEg4KBnJhdGluZxgDIAEoBSITChFSYXRlVmlkZW9SZXNwb25zZSI9ChBH",
            "ZXRSYXRpbmdSZXF1ZXN0EikKCHZpZGVvX2lkGAEgASgLMhcua2lsbHJ2aWRl",
            "by5jb21tb24uVXVpZCJsChFHZXRSYXRpbmdSZXNwb25zZRIpCgh2aWRlb19p",
            "ZBgBIAEoCzIXLmtpbGxydmlkZW8uY29tbW9uLlV1aWQSFQoNcmF0aW5nc19j",
            "b3VudBgCIAEoAxIVCg1yYXRpbmdzX3RvdGFsGAMgASgDImsKFEdldFVzZXJS",
            "YXRpbmdSZXF1ZXN0EikKCHZpZGVvX2lkGAEgASgLMhcua2lsbHJ2aWRlby5j",
            "b21tb24uVXVpZBIoCgd1c2VyX2lkGAIgASgLMhcua2lsbHJ2aWRlby5jb21t",
            "b24uVXVpZCJ8ChVHZXRVc2VyUmF0aW5nUmVzcG9uc2USKQoIdmlkZW9faWQY",
            "ASABKAsyFy5raWxscnZpZGVvLmNvbW1vbi5VdWlkEigKB3VzZXJfaWQYAiAB",
            "KAsyFy5raWxscnZpZGVvLmNvbW1vbi5VdWlkEg4KBnJhdGluZxgDIAEoBTKq",
            "AgoOUmF0aW5nc1NlcnZpY2USWAoJUmF0ZVZpZGVvEiQua2lsbHJ2aWRlby5y",
            "YXRpbmdzLlJhdGVWaWRlb1JlcXVlc3QaJS5raWxscnZpZGVvLnJhdGluZ3Mu",
            "UmF0ZVZpZGVvUmVzcG9uc2USWAoJR2V0UmF0aW5nEiQua2lsbHJ2aWRlby5y",
            "YXRpbmdzLkdldFJhdGluZ1JlcXVlc3QaJS5raWxscnZpZGVvLnJhdGluZ3Mu",
            "R2V0UmF0aW5nUmVzcG9uc2USZAoNR2V0VXNlclJhdGluZxIoLmtpbGxydmlk",
            "ZW8ucmF0aW5ncy5HZXRVc2VyUmF0aW5nUmVxdWVzdBopLmtpbGxydmlkZW8u",
            "cmF0aW5ncy5HZXRVc2VyUmF0aW5nUmVzcG9uc2VCFaoCEktpbGxyVmlkZW8u",
            "UmF0aW5nc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::KillrVideo.Protobuf.CommonTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.RateVideoRequest), global::KillrVideo.Ratings.RateVideoRequest.Parser, new[]{ "VideoId", "UserId", "Rating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.RateVideoResponse), global::KillrVideo.Ratings.RateVideoResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.GetRatingRequest), global::KillrVideo.Ratings.GetRatingRequest.Parser, new[]{ "VideoId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.GetRatingResponse), global::KillrVideo.Ratings.GetRatingResponse.Parser, new[]{ "VideoId", "RatingsCount", "RatingsTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.GetUserRatingRequest), global::KillrVideo.Ratings.GetUserRatingRequest.Parser, new[]{ "VideoId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KillrVideo.Ratings.GetUserRatingResponse), global::KillrVideo.Ratings.GetUserRatingResponse.Parser, new[]{ "VideoId", "UserId", "Rating" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request for a user rating a video
  /// </summary>
  public sealed partial class RateVideoRequest : pb::IMessage<RateVideoRequest> {
    private static readonly pb::MessageParser<RateVideoRequest> _parser = new pb::MessageParser<RateVideoRequest>(() => new RateVideoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateVideoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoRequest(RateVideoRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      rating_ = other.rating_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoRequest Clone() {
      return new RateVideoRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Protobuf.Uuid videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Protobuf.Uuid userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 3;
    private int rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateVideoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateVideoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Rating != other.Rating) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Rating != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rating);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rating);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateVideoRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 24: {
            Rating = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when a user rates a video
  /// </summary>
  public sealed partial class RateVideoResponse : pb::IMessage<RateVideoResponse> {
    private static readonly pb::MessageParser<RateVideoResponse> _parser = new pb::MessageParser<RateVideoResponse>(() => new RateVideoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateVideoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoResponse(RateVideoResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateVideoResponse Clone() {
      return new RateVideoResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateVideoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateVideoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateVideoResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Request to get the ratings stats for a video
  /// </summary>
  public sealed partial class GetRatingRequest : pb::IMessage<GetRatingRequest> {
    private static readonly pb::MessageParser<GetRatingRequest> _parser = new pb::MessageParser<GetRatingRequest>(() => new GetRatingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRatingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingRequest(GetRatingRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingRequest Clone() {
      return new GetRatingRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Protobuf.Uuid videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRatingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRatingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRatingRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting the ratings stats for a video
  /// </summary>
  public sealed partial class GetRatingResponse : pb::IMessage<GetRatingResponse> {
    private static readonly pb::MessageParser<GetRatingResponse> _parser = new pb::MessageParser<GetRatingResponse>(() => new GetRatingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRatingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingResponse(GetRatingResponse other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      ratingsCount_ = other.ratingsCount_;
      ratingsTotal_ = other.ratingsTotal_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRatingResponse Clone() {
      return new GetRatingResponse(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Protobuf.Uuid videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "ratings_count" field.</summary>
    public const int RatingsCountFieldNumber = 2;
    private long ratingsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RatingsCount {
      get { return ratingsCount_; }
      set {
        ratingsCount_ = value;
      }
    }

    /// <summary>Field number for the "ratings_total" field.</summary>
    public const int RatingsTotalFieldNumber = 3;
    private long ratingsTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RatingsTotal {
      get { return ratingsTotal_; }
      set {
        ratingsTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRatingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRatingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (RatingsCount != other.RatingsCount) return false;
      if (RatingsTotal != other.RatingsTotal) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (RatingsCount != 0L) hash ^= RatingsCount.GetHashCode();
      if (RatingsTotal != 0L) hash ^= RatingsTotal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (RatingsCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RatingsCount);
      }
      if (RatingsTotal != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RatingsTotal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (RatingsCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RatingsCount);
      }
      if (RatingsTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RatingsTotal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRatingResponse other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.RatingsCount != 0L) {
        RatingsCount = other.RatingsCount;
      }
      if (other.RatingsTotal != 0L) {
        RatingsTotal = other.RatingsTotal;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 16: {
            RatingsCount = input.ReadInt64();
            break;
          }
          case 24: {
            RatingsTotal = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request to get a specific user's rating of a video
  /// </summary>
  public sealed partial class GetUserRatingRequest : pb::IMessage<GetUserRatingRequest> {
    private static readonly pb::MessageParser<GetUserRatingRequest> _parser = new pb::MessageParser<GetUserRatingRequest>(() => new GetUserRatingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserRatingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingRequest(GetUserRatingRequest other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingRequest Clone() {
      return new GetUserRatingRequest(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Protobuf.Uuid videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Protobuf.Uuid userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserRatingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserRatingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserRatingRequest other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response when getting a specific user's rating of a video
  /// </summary>
  public sealed partial class GetUserRatingResponse : pb::IMessage<GetUserRatingResponse> {
    private static readonly pb::MessageParser<GetUserRatingResponse> _parser = new pb::MessageParser<GetUserRatingResponse>(() => new GetUserRatingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserRatingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KillrVideo.Ratings.RatingsServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingResponse(GetUserRatingResponse other) : this() {
      VideoId = other.videoId_ != null ? other.VideoId.Clone() : null;
      UserId = other.userId_ != null ? other.UserId.Clone() : null;
      rating_ = other.rating_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserRatingResponse Clone() {
      return new GetUserRatingResponse(this);
    }

    /// <summary>Field number for the "video_id" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private global::KillrVideo.Protobuf.Uuid videoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private global::KillrVideo.Protobuf.Uuid userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KillrVideo.Protobuf.Uuid UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 3;
    private int rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserRatingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserRatingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VideoId, other.VideoId)) return false;
      if (!object.Equals(UserId, other.UserId)) return false;
      if (Rating != other.Rating) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (videoId_ != null) hash ^= VideoId.GetHashCode();
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (videoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VideoId);
      }
      if (userId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserId);
      }
      if (Rating != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rating);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (videoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VideoId);
      }
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rating);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserRatingResponse other) {
      if (other == null) {
        return;
      }
      if (other.videoId_ != null) {
        if (videoId_ == null) {
          videoId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        VideoId.MergeFrom(other.VideoId);
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          userId_ = new global::KillrVideo.Protobuf.Uuid();
        }
        UserId.MergeFrom(other.UserId);
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (videoId_ == null) {
              videoId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(videoId_);
            break;
          }
          case 18: {
            if (userId_ == null) {
              userId_ = new global::KillrVideo.Protobuf.Uuid();
            }
            input.ReadMessage(userId_);
            break;
          }
          case 24: {
            Rating = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
