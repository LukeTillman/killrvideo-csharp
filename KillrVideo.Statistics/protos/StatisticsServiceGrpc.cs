// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statistics/statistics_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Statistics {
  /// <summary>
  ///  Service that tracks playback statistics for videos
  /// </summary>
  public static class StatisticsService
  {
    static readonly string __ServiceName = "killrvideo.statistics.StatisticsService";

    static readonly Marshaller<global::KillrVideo.Statistics.RecordPlaybackStartedRequest> __Marshaller_RecordPlaybackStartedRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Statistics.RecordPlaybackStartedRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Statistics.RecordPlaybackStartedResponse> __Marshaller_RecordPlaybackStartedResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Statistics.RecordPlaybackStartedResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Statistics.GetNumberOfPlaysRequest> __Marshaller_GetNumberOfPlaysRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Statistics.GetNumberOfPlaysRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Statistics.GetNumberOfPlaysResponse> __Marshaller_GetNumberOfPlaysResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Statistics.GetNumberOfPlaysResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Statistics.RecordPlaybackStartedRequest, global::KillrVideo.Statistics.RecordPlaybackStartedResponse> __Method_RecordPlaybackStarted = new Method<global::KillrVideo.Statistics.RecordPlaybackStartedRequest, global::KillrVideo.Statistics.RecordPlaybackStartedResponse>(
        MethodType.Unary,
        __ServiceName,
        "RecordPlaybackStarted",
        __Marshaller_RecordPlaybackStartedRequest,
        __Marshaller_RecordPlaybackStartedResponse);

    static readonly Method<global::KillrVideo.Statistics.GetNumberOfPlaysRequest, global::KillrVideo.Statistics.GetNumberOfPlaysResponse> __Method_GetNumberOfPlays = new Method<global::KillrVideo.Statistics.GetNumberOfPlaysRequest, global::KillrVideo.Statistics.GetNumberOfPlaysResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetNumberOfPlays",
        __Marshaller_GetNumberOfPlaysRequest,
        __Marshaller_GetNumberOfPlaysResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Statistics.StatisticsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StatisticsService</summary>
    public abstract class StatisticsServiceBase
    {
      /// <summary>
      ///  Record that playback started for a given video
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Statistics.RecordPlaybackStartedResponse> RecordPlaybackStarted(global::KillrVideo.Statistics.RecordPlaybackStartedRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Get the number of plays for a given video or set of videos
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Statistics.GetNumberOfPlaysResponse> GetNumberOfPlays(global::KillrVideo.Statistics.GetNumberOfPlaysRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StatisticsService</summary>
    public class StatisticsServiceClient : ClientBase<StatisticsServiceClient>
    {
      /// <summary>Creates a new client for StatisticsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StatisticsServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StatisticsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StatisticsServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StatisticsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StatisticsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Record that playback started for a given video
      /// </summary>
      public virtual global::KillrVideo.Statistics.RecordPlaybackStartedResponse RecordPlaybackStarted(global::KillrVideo.Statistics.RecordPlaybackStartedRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RecordPlaybackStarted(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Record that playback started for a given video
      /// </summary>
      public virtual global::KillrVideo.Statistics.RecordPlaybackStartedResponse RecordPlaybackStarted(global::KillrVideo.Statistics.RecordPlaybackStartedRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordPlaybackStarted, null, options, request);
      }
      /// <summary>
      ///  Record that playback started for a given video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Statistics.RecordPlaybackStartedResponse> RecordPlaybackStartedAsync(global::KillrVideo.Statistics.RecordPlaybackStartedRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RecordPlaybackStartedAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Record that playback started for a given video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Statistics.RecordPlaybackStartedResponse> RecordPlaybackStartedAsync(global::KillrVideo.Statistics.RecordPlaybackStartedRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordPlaybackStarted, null, options, request);
      }
      /// <summary>
      ///  Get the number of plays for a given video or set of videos
      /// </summary>
      public virtual global::KillrVideo.Statistics.GetNumberOfPlaysResponse GetNumberOfPlays(global::KillrVideo.Statistics.GetNumberOfPlaysRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNumberOfPlays(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get the number of plays for a given video or set of videos
      /// </summary>
      public virtual global::KillrVideo.Statistics.GetNumberOfPlaysResponse GetNumberOfPlays(global::KillrVideo.Statistics.GetNumberOfPlaysRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNumberOfPlays, null, options, request);
      }
      /// <summary>
      ///  Get the number of plays for a given video or set of videos
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Statistics.GetNumberOfPlaysResponse> GetNumberOfPlaysAsync(global::KillrVideo.Statistics.GetNumberOfPlaysRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNumberOfPlaysAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get the number of plays for a given video or set of videos
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Statistics.GetNumberOfPlaysResponse> GetNumberOfPlaysAsync(global::KillrVideo.Statistics.GetNumberOfPlaysRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNumberOfPlays, null, options, request);
      }
      protected override StatisticsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StatisticsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(StatisticsServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RecordPlaybackStarted, serviceImpl.RecordPlaybackStarted)
          .AddMethod(__Method_GetNumberOfPlays, serviceImpl.GetNumberOfPlays).Build();
    }

  }
}
#endregion
