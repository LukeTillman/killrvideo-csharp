// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comments/comments_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Comments {
  /// <summary>
  ///  Manages comments
  /// </summary>
  public static class CommentsService
  {
    static readonly string __ServiceName = "killrvideo.comments.CommentsService";

    static readonly Marshaller<global::KillrVideo.Comments.CommentOnVideoRequest> __Marshaller_CommentOnVideoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.CommentOnVideoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.CommentOnVideoResponse> __Marshaller_CommentOnVideoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.CommentOnVideoResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetUserCommentsRequest> __Marshaller_GetUserCommentsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetUserCommentsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetUserCommentsResponse> __Marshaller_GetUserCommentsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetUserCommentsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetVideoCommentsRequest> __Marshaller_GetVideoCommentsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetVideoCommentsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Comments.GetVideoCommentsResponse> __Marshaller_GetVideoCommentsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Comments.GetVideoCommentsResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Comments.CommentOnVideoRequest, global::KillrVideo.Comments.CommentOnVideoResponse> __Method_CommentOnVideo = new Method<global::KillrVideo.Comments.CommentOnVideoRequest, global::KillrVideo.Comments.CommentOnVideoResponse>(
        MethodType.Unary,
        __ServiceName,
        "CommentOnVideo",
        __Marshaller_CommentOnVideoRequest,
        __Marshaller_CommentOnVideoResponse);

    static readonly Method<global::KillrVideo.Comments.GetUserCommentsRequest, global::KillrVideo.Comments.GetUserCommentsResponse> __Method_GetUserComments = new Method<global::KillrVideo.Comments.GetUserCommentsRequest, global::KillrVideo.Comments.GetUserCommentsResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUserComments",
        __Marshaller_GetUserCommentsRequest,
        __Marshaller_GetUserCommentsResponse);

    static readonly Method<global::KillrVideo.Comments.GetVideoCommentsRequest, global::KillrVideo.Comments.GetVideoCommentsResponse> __Method_GetVideoComments = new Method<global::KillrVideo.Comments.GetVideoCommentsRequest, global::KillrVideo.Comments.GetVideoCommentsResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetVideoComments",
        __Marshaller_GetVideoCommentsRequest,
        __Marshaller_GetVideoCommentsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Comments.CommentsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CommentsService</summary>
    public abstract class CommentsServiceBase
    {
      /// <summary>
      ///  Add a new comment to a video
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Get comments made by a user
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Get comments made on a video
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CommentsService</summary>
    public class CommentsServiceClient : ClientBase<CommentsServiceClient>
    {
      /// <summary>Creates a new client for CommentsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CommentsServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CommentsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CommentsServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CommentsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CommentsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Add a new comment to a video
      /// </summary>
      public virtual global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CommentOnVideo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Add a new comment to a video
      /// </summary>
      public virtual global::KillrVideo.Comments.CommentOnVideoResponse CommentOnVideo(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommentOnVideo, null, options, request);
      }
      /// <summary>
      ///  Add a new comment to a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CommentOnVideoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Add a new comment to a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.CommentOnVideoResponse> CommentOnVideoAsync(global::KillrVideo.Comments.CommentOnVideoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommentOnVideo, null, options, request);
      }
      /// <summary>
      ///  Get comments made by a user
      /// </summary>
      public virtual global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUserComments(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get comments made by a user
      /// </summary>
      public virtual global::KillrVideo.Comments.GetUserCommentsResponse GetUserComments(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserComments, null, options, request);
      }
      /// <summary>
      ///  Get comments made by a user
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUserCommentsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get comments made by a user
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.GetUserCommentsResponse> GetUserCommentsAsync(global::KillrVideo.Comments.GetUserCommentsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserComments, null, options, request);
      }
      /// <summary>
      ///  Get comments made on a video
      /// </summary>
      public virtual global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVideoComments(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get comments made on a video
      /// </summary>
      public virtual global::KillrVideo.Comments.GetVideoCommentsResponse GetVideoComments(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVideoComments, null, options, request);
      }
      /// <summary>
      ///  Get comments made on a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVideoCommentsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get comments made on a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Comments.GetVideoCommentsResponse> GetVideoCommentsAsync(global::KillrVideo.Comments.GetVideoCommentsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVideoComments, null, options, request);
      }
      protected override CommentsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CommentsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CommentsServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CommentOnVideo, serviceImpl.CommentOnVideo)
          .AddMethod(__Method_GetUserComments, serviceImpl.GetUserComments)
          .AddMethod(__Method_GetVideoComments, serviceImpl.GetVideoComments).Build();
    }

  }
}
#endregion
