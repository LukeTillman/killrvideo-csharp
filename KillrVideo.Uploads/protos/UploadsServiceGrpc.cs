// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uploads/uploads_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace KillrVideo.Uploads {
  /// <summary>
  ///  Service that handles processing/re-encoding of uploaded videos
  /// </summary>
  public static class UploadsService
  {
    static readonly string __ServiceName = "killrvideo.uploads.UploadsService";

    static readonly Marshaller<global::KillrVideo.Uploads.GetUploadDestinationRequest> __Marshaller_GetUploadDestinationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetUploadDestinationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetUploadDestinationResponse> __Marshaller_GetUploadDestinationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetUploadDestinationResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.MarkUploadCompleteRequest> __Marshaller_MarkUploadCompleteRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.MarkUploadCompleteRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.MarkUploadCompleteResponse> __Marshaller_MarkUploadCompleteResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.MarkUploadCompleteResponse.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetStatusOfVideoRequest> __Marshaller_GetStatusOfVideoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetStatusOfVideoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::KillrVideo.Uploads.GetStatusOfVideoResponse> __Marshaller_GetStatusOfVideoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KillrVideo.Uploads.GetStatusOfVideoResponse.Parser.ParseFrom);

    static readonly Method<global::KillrVideo.Uploads.GetUploadDestinationRequest, global::KillrVideo.Uploads.GetUploadDestinationResponse> __Method_GetUploadDestination = new Method<global::KillrVideo.Uploads.GetUploadDestinationRequest, global::KillrVideo.Uploads.GetUploadDestinationResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetUploadDestination",
        __Marshaller_GetUploadDestinationRequest,
        __Marshaller_GetUploadDestinationResponse);

    static readonly Method<global::KillrVideo.Uploads.MarkUploadCompleteRequest, global::KillrVideo.Uploads.MarkUploadCompleteResponse> __Method_MarkUploadComplete = new Method<global::KillrVideo.Uploads.MarkUploadCompleteRequest, global::KillrVideo.Uploads.MarkUploadCompleteResponse>(
        MethodType.Unary,
        __ServiceName,
        "MarkUploadComplete",
        __Marshaller_MarkUploadCompleteRequest,
        __Marshaller_MarkUploadCompleteResponse);

    static readonly Method<global::KillrVideo.Uploads.GetStatusOfVideoRequest, global::KillrVideo.Uploads.GetStatusOfVideoResponse> __Method_GetStatusOfVideo = new Method<global::KillrVideo.Uploads.GetStatusOfVideoRequest, global::KillrVideo.Uploads.GetStatusOfVideoResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetStatusOfVideo",
        __Marshaller_GetStatusOfVideoRequest,
        __Marshaller_GetStatusOfVideoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KillrVideo.Uploads.UploadsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UploadsService</summary>
    public abstract class UploadsServiceBase
    {
      /// <summary>
      ///  Gets an upload destination for a user to upload a video
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Marks an upload as complete
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the status of an uploaded video
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UploadsService</summary>
    public class UploadsServiceClient : ClientBase<UploadsServiceClient>
    {
      /// <summary>Creates a new client for UploadsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UploadsServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UploadsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UploadsServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UploadsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UploadsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Gets an upload destination for a user to upload a video
      /// </summary>
      public virtual global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUploadDestination(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets an upload destination for a user to upload a video
      /// </summary>
      public virtual global::KillrVideo.Uploads.GetUploadDestinationResponse GetUploadDestination(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUploadDestination, null, options, request);
      }
      /// <summary>
      ///  Gets an upload destination for a user to upload a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUploadDestinationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets an upload destination for a user to upload a video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.GetUploadDestinationResponse> GetUploadDestinationAsync(global::KillrVideo.Uploads.GetUploadDestinationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUploadDestination, null, options, request);
      }
      /// <summary>
      ///  Marks an upload as complete
      /// </summary>
      public virtual global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MarkUploadComplete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Marks an upload as complete
      /// </summary>
      public virtual global::KillrVideo.Uploads.MarkUploadCompleteResponse MarkUploadComplete(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkUploadComplete, null, options, request);
      }
      /// <summary>
      ///  Marks an upload as complete
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MarkUploadCompleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Marks an upload as complete
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.MarkUploadCompleteResponse> MarkUploadCompleteAsync(global::KillrVideo.Uploads.MarkUploadCompleteRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkUploadComplete, null, options, request);
      }
      /// <summary>
      ///  Gets the status of an uploaded video
      /// </summary>
      public virtual global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetStatusOfVideo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the status of an uploaded video
      /// </summary>
      public virtual global::KillrVideo.Uploads.GetStatusOfVideoResponse GetStatusOfVideo(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusOfVideo, null, options, request);
      }
      /// <summary>
      ///  Gets the status of an uploaded video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetStatusOfVideoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the status of an uploaded video
      /// </summary>
      public virtual AsyncUnaryCall<global::KillrVideo.Uploads.GetStatusOfVideoResponse> GetStatusOfVideoAsync(global::KillrVideo.Uploads.GetStatusOfVideoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusOfVideo, null, options, request);
      }
      protected override UploadsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UploadsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(UploadsServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUploadDestination, serviceImpl.GetUploadDestination)
          .AddMethod(__Method_MarkUploadComplete, serviceImpl.MarkUploadComplete)
          .AddMethod(__Method_GetStatusOfVideo, serviceImpl.GetStatusOfVideo).Build();
    }

  }
}
#endregion
